#!/usr/bin/env bash

# this is global for error reporting
ASDF_KAFKA_ERROR=""

# Download the kafka dist from Apache, and unpack archive.
install_kafka() {
	local version=$1
	local dir=$2

	read -r scala_version release <<< $(echo $version | sed -e 's|-| |')

	download_kafka "$scala_version" "$release" "$dir"
	[[ -z "$ASDF_KAFKA_ERROR" ]] || return

	unpack_kafka "$dir" "$version"
	[[ -z "$ASDF_KAFKA_ERROR" ]] || return
}

# Download kafka from Apache.
download_kafka() {
	local scala_version=$1
	local release=$2
	local dir=$3

	local base=http://archive.apache.org/dist/kafka
	local variant="kafka_$scala_version-$release.tgz"
	local url="$base/$release/$variant"

	echo "---- ASDF KAFKA MESSAGE ----"
	echo "downloading: $url"

	curl -fLC - \
		--silent \
		--retry 3 \
		--retry-delay 3 \
		-o "$dir/$variant" "$url"

	[[ $? != 0 ]] && ASDF_KAFKA_ERROR="downloading kafka dist"
}

# Unarchive a tar archive into the install directory and cleanup.
#
# NOTE: Using $origin as a memo rather than executing in a subshell
#   because errors won't be persisted from a subshell.
#
# TODO: Should be sanitized with error reporting.
unpack_kafka() {
	local dir=$1
	local version=$2

	local archive="$dir/kafka_$version.tgz"

	tar -xzf "$archive" -C "$dir" --strip-components=1
	[[ $? == 0 ]] || ASDF_KAFKA_ERROR="expanding kafka dist"
	rm "$archive"
}

#
# MAIN
#
install_kafka $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH

if ! [[ -z "$ASDF_KAFKA_ERROR" ]]; then
	rm -rf $ASDF_INSTALL_PATH

	echo "---- ASDF KAFKA ERROR ----"
	echo "asdf kafka failed while $ASDF_KAFKA_ERROR"
	echo "----"
else
	echo "---- ASDF KAFKA INSTALL SUCCESS --"
fi

unset ASDF_KAFKA_ERROR
